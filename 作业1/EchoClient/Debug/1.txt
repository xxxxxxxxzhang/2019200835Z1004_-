#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */






#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */

#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */


#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */
#undef UNICODE

#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;
//
// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
 #pragma comment (lib, "Mswsock.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"
DWORD WINAPI comm_with_client(LPVOID IpParam);
int __cdecl main(int argc,char **argv) 
{
    WSADATA wsaData;//WSADATA结构被用来保存AfxSocketInit函数返回的WindowsSockets初始化信息。
   

    SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;

    struct addrinfo *result = NULL;
    struct addrinfo hints;
	unsigned short port;
	int iResult;
    int iSendResult;
    char recvbuf[DEFAULT_BUFLEN];
    int recvbuflen = DEFAULT_BUFLEN;
    
    // Initialize Winsock
	/*
	int WSAStartup(
	 WORD      wVersionRequired,
	 LPWSADATA lpWSAData//A pointer to the WSADATA data structure that is to receive details of the Windows Sockets implementation.
	);*/
	
	/*
	//makeword是将两个byte型合并成一个word型，一个在高8位(b)，一个在低8位(a)
	声明调用不同的Winsock版本。例如MAKEWORD(2,2)就是调用2.2版，MAKEWORD(1,1)就是调用1.1版。
不同版本是有区别的，例如1.1版只支持TCP/IP协议，而2.0版可以支持多协议。
2.0版有良好的向后兼容性，任何使用1.1版的源代码、二进制文件、应用程序都可以不加修改地在2.0规范下使用。
此外winsock 2.0支持异步 1.1不支持异步
	*/

	cout << "命令个数：" << argc << endl;

    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);//The WSAStartup function initiates use of the Winsock DLL by a process.
    if (iResult != 0) {                            //应用程序或DLL只能在一次成功的WSAStartup()调用之后才能调用进一步的Windows Sockets API函数
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	printf("iResult:%d\n",iResult);
    ZeroMemory(&hints, sizeof(hints));//用零填充字节块 addrinfo
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

	string listenPort = argv[1];
	//listenPort.c_str();
	port=atoi((char*)listenPort.c_str());
	cout << "端口：" << listenPort.c_str() << endl;
    // Resolve the server address and port
	//pNodeName指向以NULL结尾的ANSI字符串的指针，该字符串包含主机（节点）名称或数字主机地址字符串。对于Internet协议，数字主机地址字符串是点分十进制的IPv4地址或IPv6十六进制地址。pServiceNam
	//pServiceName指向以NULL结尾的ANSI字符串的指针，该字符串包含以字符串表示的服务名称或端口号。
	//pHints指向addrinfo结构的指针，该结构提供有关调用者支持的套接字类型的提示。
	//ppResult 指向一个或多个addrinfo结构的链表的指针，该链表 包含有关主机的响应信息。
    /*
	iResult = getaddrinfo(NULL, listenPort.c_str(), &hints, &result);//成功返回零。失败将返回非零的Windows套接字错误代码
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }
	*/

	struct sockaddr_in ip4addr;
	int s;
	ip4addr.sin_family = AF_INET;
	ip4addr.sin_port = htons(3490);
	ip4addr.sin_addr.s_addr = inet_addr("10.0.0.1");
	//InetPton(AF_INET, "10.0.0.1", &ip4addr.sin_addr); 
	//s = socket(PF_INET, SOCK_STREAM, 0);
	bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	
    // Create a SOCKET for connecting to server
	//af地址族规范。地址族的可能值在Winsock2.h头文件中定义。
	//type新套接字的类型规范。
	//protocol要使用的协议。protocol参数的可能选项特定于指定的地址系列和套接字类型。在Winsock2.h和Wsrm.h头文件中定义 了协议的可能值。
	// 如果没有错误发生，则 套接字返回引用新套接字的描述符.否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。
	ListenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (ListenSocket == INVALID_SOCKET) {
        printf("socket failed with error: %ld\n", WSAGetLastError());
        freeaddrinfo(result);// getaddrinfo函数返回的所有信息都是动态分配的，包括所有addrinfo结构，套接字地址结构以及addrinfo结构指向的规范主机名字符串 。成功调用此函数分配的内存必须与随后的freeaddrinfo调用一起释放。
        WSACleanup();//每次成功调用WSAStartup要调用
        return 1;
    }

    // Setup the TCP listening socket
	//绑定监听端口
	//参数列表中，sockfd 表示已经建立的socket编号（描述符）；
	//my_addr 是一个指向sockaddr结构体类型的指针；
	//参数addrlen表示my_addr结构的长度，可以用sizeof操作符获得。
	//如无错误发生，则bind()返回0。否则的话，将返回-1，应用程序可通过WSAGetLastError()获取相应错误代码。
	//bind(s, (struct sockaddr*)&ip4addr, sizeof(ip4addr));
	//iResult = bind( ListenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        printf("bind failed with error: %d\n", WSAGetLastError());
        freeaddrinfo(result);
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }

    freeaddrinfo(result);
	//通过 listen() 函数可以让套接字进入被动监听状态，sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。
    iResult = listen(ListenSocket, SOMAXCONN);
	printf("iResult listen:%d\n", iResult);
    if (iResult == SOCKET_ERROR) {
        printf("listen failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
    }
	while(1)
	{
    // Accept a client socket
	//当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求.它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。
    ClientSocket = accept(ListenSocket, NULL, NULL);
	printf("iResult 接收客户端socket请求:%d\n", iResult);
    if (ClientSocket == INVALID_SOCKET) {
        printf("accept failed with error: %d\n", WSAGetLastError());
        closesocket(ListenSocket);
        WSACleanup();
        return 1;
	 }

	// Receive until the peer shuts down the connection
	do {

		iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
		printf("iResult 开始接收数据:%d\n", iResult);
		if (iResult > 0) {
			printf("reviced:%s\n", recvbuf);
			printf("Bytes received: %d\n", iResult);

			// Echo the buffer back to the sender
				//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
				//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
			iSendResult = send(ClientSocket, recvbuf, iResult, 0);
			printf("iResult 向客户端发送应答请求:%d\n", iResult);
			if (iSendResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
			printf("Bytes sent: %d\n", iSendResult);

		}
		else if (iResult == 0)
			printf("Connection closing...\n");
		else {
			printf("recv failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

	} while (iResult > 0);

	// shutdown the connection since we're done
	iResult = shutdown(ClientSocket, SD_SEND);
	printf("iResult 关闭情况:%d\n", iResult);
	if (iResult == SOCKET_ERROR) {
		printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();

		return 1;
	}
	/*
	DWORD tid;
	HANDLE hThread = CreateThread(
		NULL,
		0,
		comm_with_client,
		(LPVOID)ClientSocket,
		0,
		&tid
		);
	if(hThread == NULL){
		printf("CreateThread Error(%d)",GetLastError());
	}
	  */
	// cleanup
	closesocket(ClientSocket);
  }

	

	 closesocket(ListenSocket);
	 WSACleanup();
    // No longer need server socket

  return 0;   
}
/*
DWORD WINAPI comm_with_client(LPVOID IpParam){
	int iSendResult;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;

	//SOCKET ListenSocket = INVALID_SOCKET;
    SOCKET ClientSocket = INVALID_SOCKET;
	 // Receive until the peer shuts down the connection
    do {

        iResult = recv(ClientSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0) {
			printf("reviced:%s\n",recvbuf);
            printf("Bytes received: %d\n", iResult);

        // Echo the buffer back to the sender
			//客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。
			//第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数;第四个参数一般置0。
           iSendResult = send( ClientSocket, recvbuf, iResult, 0 );
           if (iSendResult == SOCKET_ERROR) {
                printf("send failed with error: %d\n", WSAGetLastError());
                closesocket(ClientSocket);
                WSACleanup();
                return 1;
            }
            printf("Bytes sent: %d\n", iSendResult);

        }
        else if (iResult == 0)
            printf("Connection closing...\n");
        else  {
            printf("recv failed with error: %d\n", WSAGetLastError());
            closesocket(ClientSocket);
            WSACleanup();
            return 1;
        }

    } while (iResult > 0);

    // shutdown the connection since we're done
    iResult = shutdown(ClientSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("shutdown failed with error: %d\n", WSAGetLastError());
        closesocket(ClientSocket);
        WSACleanup();

        return 1;
    }
}
	
 */








